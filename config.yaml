# ================================================================
# AutoSetupスクリプト設定ファイル
# ================================================================
# 実行したいタスクをフェーズごとに定義します。
# 不要な項目は、行頭に「#」を付けてコメントアウトするとスキップされます。

# ----------------------------------------------------------------
# ■ フェーズ1: システムの基本セットアップ
# ----------------------------------------------------------------
phase1:
  # --- Wingetによるアプリケーションのインストール ---
  wingetInstall:
    - id: Microsoft.PowerShell                 # 最新のPowerShell
    - id: Google.Chrome                        # Webブラウザ
    - id: 7zip.7zip                            # 高性能なファイル圧縮・解凍ソフト
    - id: Microsoft.PowerToys                  # Windowsを便利にするユーティリティ集
    - id: Zoom.Zoom                            # Web会議ツール
    - id: Git.Git                              # バージョン管理システム
    - id: OpenJS.NodeJS.LTS                    # JavaScript実行環境 (長期サポート版)
    - id: Python.Python.3.12                   # プログラミング言語 Python
    - id: astral-sh.uv                         # 高速なPythonパッケージインストーラー
    - id: Microsoft.VisualStudioCode           # 統合開発環境 (IDE)
      options: '--override "/SILENT /NORESTART /MERGETASKS=!runcode,desktopicon,addcontextmenufiles,addcontextmenufolders,associatewithfiles,addtopath"'
    - id: Adobe.Acrobat.Reader.64-bit          # PDF閲覧ソフト
      options: '--override "/sAll /rs /rps /msi EULA_ACCEPT=YES"'

  # --- 不要なプリインストールアプリの削除 ---
  appxRemove:
    - name: "*Cortana*"                        # AIアシスタント
    - name: "*Microsoft.BingNews*"             # ニュースアプリ
    - name: "*Microsoft.GetHelp*"              # ヘルプ表示アプリ
    - name: "*Microsoft.Getstarted*"           # ヒント表示アプリ
    - name: "*Microsoft.Office.OneNote*"       # OneNote (ストアアプリ版)
    - name: "*Microsoft.People*"               # People (連絡先) アプリ
    - name: "*Microsoft.WindowsFeedbackHub*"   # フィードバックHub
    - name: "*Microsoft.YourPhone*"            # スマートフォン連携
    - name: "*Microsoft.ZuneMusic*"            # Grooveミュージック
    - name: "*Microsoft.ZuneVideo*"            # 映画 & テレビ

  # --- Windowsのシステム設定変更 ---
  windowsTweaks:
    - description: 隠しファイルとフォルダを表示する
      type: Set-RegistryValue # レジストリの値を設定
      path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
      name: Hidden
      value: 1
      valueType: DWord
    - description: ファイルの拡張子を常に表示する
      type: Set-RegistryValue
      path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
      name: HideFileExt
      value: 0
      valueType: DWord
    - description: エクスプローラーのアドレスバーに完全なパスを表示する
      type: Set-RegistryValue
      path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\CabinetState
      name: FullPathAddress
      value: 1
      valueType: DWord
    - description: エクスプローラーの起動時に「PC」を表示する
      type: Set-RegistryValue
      path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
      name: LaunchTo
      value: 1
      valueType: DWord
    - description: 高速スタートアップを無効化する
      type: Set-RegistryValue
      path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Power
      name: HiberbootEnabled
      value: 0
      valueType: DWord
    - description: 右クリックメニューを従来のスタイルに戻す (Win11)
      type: Create-RegistryKeyWithDefault # キーを作成し、その既定値を設定
      path: HKCU:\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32
      value: "" # 空の既定値を設定

# ----------------------------------------------------------------
# ■ フェーズ2: 開発者向けパッケージのインストール（再起動後）
# ----------------------------------------------------------------
phase2:
  # =================================================================
  # ■ パッケージマネージャーとインストールするパッケージの定義
  # =================================================================
  # ここでは、使用するパッケージマネージャーごとの設定と、
  # それぞれでインストールしたいパッケージのリストを定義します。
  # スクリプトは、この定義に基づいてパッケージのインストール処理を自動化します。
  packageManagers:
    # --- npm (Node.js) の設定 ---
    - managerName: 'npm'                                  # 管理用の名前 (ログ出力などで使用)
      commandName: 'npm'                                  # ターミナルで実行するコマンド名
      checkCommand: 'npm list -g {package} --depth=0'     # インストール済みか確認するコマンド ({package}は置換されます)
      installCommand: 'npm install -g {package}'          # インストールを実行するコマンド ({package}は置換されます)
      packages:                                           # このマネージャーでインストールするパッケージのリスト
        - typescript      # JavaScriptに静的型付けを追加する言語
        - ts-node         # TypeScriptファイルを直接実行するランタイム
        - nodemon         # ファイル変更を監視し、自動でサーバーを再起動するツール
        - eslint          # JavaScript/TypeScriptコードの静的解析ツール (品質チェック)
        - prettier        # コードのスタイルを統一するフォーマッター
        - pnpm            # 高速でディスク効率の良いパッケージマネージャー

    # --- pip (Python) の設定 (uvを使用) ---
    - managerName: 'pip'                                  # 管理用の名前
      commandName: 'uv'                                   # 実行するコマンド名 (uvをpipのラッパーとして使用)
      checkCommand: 'uv pip show {package}'               # インストール済みか確認するコマンド
      installCommand: 'uv pip install {package} --system' # インストールを実行するコマンド
      packages:                                           # インストールするパッケージのリスト
        - jupyterlab                      # 対話的なデータ分析・開発環境
        - jupyterlab-language-pack-ja-jp  # JupyterLabの日本語化パック
        - requests                        # シンプルで使いやすいHTTP通信ライブラリ
        - numpy                           # 高速な数値計算・多次元配列を扱うライブラリ
        - pandas                          # データ解析を支援するライブラリ (データフレーム操作)
        - matplotlib                      # 定番のグラフ描画ライブラリ
        - black                           # 厳格で一貫性のあるPythonコードフォーマッター
        - ruff                            # 非常に高速なPythonリンター (品質チェック)
        - python-dotenv                   # .envファイルから環境変数を読み込むライブラリ
        - scikit-learn                    # 機械学習のための総合ライブラリ
        - seaborn                         # matplotlibを基にした、より美しいグラフ描画ライブラリ
        - openpyxl                        # Excelファイル (.xlsx) の読み書きライブラリ
        - fastapi                         # 高パフォーマンスなWeb APIフレームワーク
        - lxml                            # 高速で多機能なXML/HTMLパーサー

    # --- cargo (Rust) の設定例 (必要に応じてコメントを外してください) ---
    # - managerName: 'cargo'                                # 管理用の名前
    #   commandName: 'cargo'                                # 実行するコマンド名
    #   checkCommand: 'cargo install --list | Select-String -Quiet -Pattern "^{package} v"' # インストール済みか確認するコマンド
    #   installCommand: 'cargo install {package}'           # インストールを実行するコマンド
    #   packages:                                           # インストールするパッケージのリスト
    #     - ripgrep  # 高速なgrep代替ツール
    #     - bat      # シンタックスハイライト機能付きのcat代替ツール
    #     - fd-find  # シンプルで高速なfind代替ツール