# ワークフローの名前。GitHubの "Actions" タブで表示されます。
name: PowerShell AutoSetup Script CI

# このワークフローが実行されるタイミング（トリガー）を指定します。
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 実行する一連のジョブを定義します。
jobs:
  run-script-on-windows:
    runs-on: windows-latest
    steps:
    # ステップ1: リポジトリのコードを仮想マシンにダウンロードします。
    - name: Checkout repository code
      uses: actions/checkout@v4

    # ステップ2: フェーズ1を実行します。
    # Invoke-Expressionを使い、PowerShell内でコマンド実行を完結させるラッパー関数を定義します。
    - name: Run AutoSetup Phase 1
      shell: powershell
      run: |
        # winget.exeへのフルパスを事前に変数に格納
        $wingetPath = Join-Path $env:LOCALAPPDATA "Microsoft\WindowsApps\winget.exe"

        # wingetコマンドの挙動を上書きするラッパー関数
        function global:winget {
            # スクリプトから渡された引数を単純に文字列として結合
            $argumentString = $args -join ' '
            # 実行するコマンドの完全な文字列を組み立てる。& (呼び出し演算子) を先頭に付ける。
            $commandToRun = "& `"$wingetPath`" $argumentString"

            # デバッグ用に実行するコマンド全体を表示
            Write-Host "Wrapper: Executing command via Invoke-Expression: $commandToRun"
            # 組み立てたコマンド文字列を、PowerShellコマンドとして解釈・実行する
            Invoke-Expression -Command $commandToRun
        }
        # スクリプトを実行
        .\AutoSetup.ps1

    # ステップ3: フェーズ2を実行します。
    # こちらのステップでも同様のラッパー関数を定義します。
    - name: Run AutoSetup Phase 2
      shell: powershell
      run: |
        $wingetPath = Join-Path $env:LOCALAPPDATA "Microsoft\WindowsApps\winget.exe"
        function global:winget {
            $argumentString = $args -join ' '
            $commandToRun = "& `"$wingetPath`" $argumentString"
            Write-Host "Wrapper: Executing command via Invoke-Expression: $commandToRun"
            Invoke-Expression -Command $commandToRun
        }
        .\AutoSetup.ps1 -SetupPhase 2