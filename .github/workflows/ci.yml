# ワークフローの名前。GitHubの "Actions" タブで表示されます。
name: PowerShell AutoSetup Script CI

# このワークフローが実行されるタイミング（トリガー）を指定します。
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 実行する一連のジョブを定義します。
jobs:
  run-script-on-windows:
    runs-on: windows-latest
    steps:
    # ステップ1: リポジトリのコードを仮想マシンにダウンロードします。
    - name: Checkout repository code
      uses: actions/checkout@v4

    # ステップ2: フェーズ1を実行します。
    # cmd.exeのセッション内でPATHを設定してからwingetを実行する、複合コマンドを使います。
    - name: Run AutoSetup Phase 1
      shell: powershell
      run: |
        # wingetコマンドの挙動を上書きするラッパー関数
        function global:winget {
            # スクリプトから渡された引数を文字列として結合
            $argumentString = $args -join ' '
            # cmd.exeに渡すための複合コマンドを組み立てる
            # 1. cmd.exe自身のPATHにwingetのパスを追加
            # 2. && を使い、PATH設定が成功したらwingetを実行
            $commandToRun = "path %path%;%localappdata%\Microsoft\WindowsApps && winget $argumentString"

            Write-Host "Wrapper: Executing compound command in cmd.exe: $commandToRun"
            # 組み立てた複合コマンドをcmd.exeに実行させる
            cmd.exe /c $commandToRun
        }
        # スクリプトを実行
        .\AutoSetup.ps1

    # ステップ3: フェーズ2を実行します。
    # こちらのステップでも同様のラッパー関数を定義します。
    - name: Run AutoSetup Phase 2
      shell: powershell
      run: |
        function global:winget {
            $argumentString = $args -join ' '
            $commandToRun = "path %path%;%localappdata%\Microsoft\WindowsApps && winget $argumentString"
            Write-Host "Wrapper: Executing compound command in cmd.exe: $commandToRun"
            cmd.exe /c $commandToRun
        }
        .\AutoSetup.ps1 -SetupPhase 2