# ワークフローの名前。GitHubの "Actions" タブで表示されます。
name: PowerShell AutoSetup Script CI

# このワークフローが実行されるタイミング（トリガー）を指定します。
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 実行する一連のジョブを定義します。
jobs:
  run-script-on-windows:
    runs-on: windows-latest
    steps:
    # ステップ1: リポジトリのコードを仮想マシンにダウンロードします。
    - name: Checkout repository code
      uses: actions/checkout@v4

    # ステップ2: フェーズ1を実行します。
    # 解析停止演算子(--%)を使い、PowerShellの余計な引数解釈を完全に止めさせます。
    - name: Run AutoSetup Phase 1
      shell: powershell
      run: |
        $wingetPath = Join-Path $env:LOCALAPPDATA "Microsoft\WindowsApps\winget.exe"

        function global:winget {
            $argumentString = $args -join ' '
            $commandToRun = "`"$wingetPath`" $argumentString"

            Write-Host "Wrapper: Executing command via cmd.exe: $commandToRun"
            # --% を使い、コマンド文字列を解釈させずにそのままcmd.exeへ渡す
            cmd.exe /c --% $commandToRun
        }
        .\AutoSetup.ps1

    # ステップ3: フェーズ2を実行します。
    # こちらのステップでも同様のラッパー関数を定義します。
    - name: Run AutoSetup Phase 2
      shell: powershell
      run: |
        $wingetPath = Join-Path $env:LOCALAPPDATA "Microsoft\WindowsApps\winget.exe"
        function global:winget {
            $argumentString = $args -join ' '
            $commandToRun = "`"$wingetPath`" $argumentString"

            Write-Host "Wrapper: Executing command via cmd.exe: $commandToRun"
            # --% を使い、コマンド文字列を解釈させずにそのままcmd.exeへ渡す
            cmd.exe /c --% $commandToRun
        }
        .\AutoSetup.ps1 -SetupPhase 2